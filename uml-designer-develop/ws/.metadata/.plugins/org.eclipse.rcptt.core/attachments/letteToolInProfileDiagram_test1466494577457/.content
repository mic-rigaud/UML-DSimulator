// Create New Extend existingRelationShip between two Stereotypes
with [get-editor "Test Profile Diagram"] {
    with [get-palette | get-palette-entry "Extend existing RelationShip"] {
        mouse-move 24 10 button1 -height 37 -width 182
        mouse-press 24 10 button1 -height 37 -width 182
        mouse-release 24 10 button1 524288 -height 37 -width 182
    }
    with [get-diagram -index 1 | get-edit-part -name "Test Profile Diagram"] {
        with [get-edit-part -name "«Stereotype» \n"
            + "Stereotype1"] {
            with [get-edit-part -className DNodeListNameEditPart] {
                mouse-move 37 25 button1 -height 34 -width 100
                mouse-press 37 25 button1 -height 34 -width 100
                mouse-release 37 25 button1 524288 -height 34 -width 100
            }
        }
        with [get-edit-part -name "«Stereotype» \n"
            + "Stereotype2" | get-edit-part -className DNodeListNameEditPart] {
            mouse-move 35 18 button1 -height 34 -width 100
            mouse-press 35 18 button1 -height 34 -width 100
        }
    }
}
with [get-window "Extend existing RelationShip"] {
    get-table | select Association
    get-button OK | click
}

//Check relationship between Stereotype1 andStereotype2
with [get-editor "Test Profile Diagram" | get-diagram -index 1 | get-edit-part -name "Test Profile Diagram" 
    | get-edit-part -name "«Stereotype» \n"
    + "Stereotype2" | get-target-connection 0] {
    get-edit-part -className "" -index 1 | get-property "getFigure().getText()" | equals "endType[1]" | verify-true
    get-edit-part -className "" -index 2 | get-property "getFigure().getText()" | equals "endType[1]" | verify-true
    get-property "element.ownedStyle.customFeatures" | equals "[]" | verify-true
    get-property "element.ownedStyle.lineStyle" | equals solid | verify-true
    get-property "element.ownedStyle.sourceArrow" | equals NoDecoration | verify-true
    get-property "element.ownedStyle.targetArrow" | equals NoDecoration | verify-true
    get-property "element.ownedStyle.foldingStyle" | equals NONE | verify-true
    get-property "element.ownedStyle.size" | equals 2 | verify-true
    get-property "element.ownedStyle.routingStyle" | equals straight | verify-true
    //get-property "element.ownedStyle.centerLabelStyle" | equals null | verify-true
    get-property "element.ownedStyle.centered" | equals None | verify-true
    get-property "source.element.name" | equals "«Stereotype» \n"
        + "Stereotype1" | verify-true
    get-property "target.element.name" | equals "«Stereotype» \n"
        + "Stereotype2" | verify-true
    get-property "getFigure().isVisible()" | equals true | verify-true
}

// Chek new stereotype appears in diagram
with [get-editor "Test Profile Diagram" | get-diagram -index 1 | get-edit-part -name "Test Profile Diagram"] {
    with [get-edit-part -name "«Stereotype» \n"
        + "Stereotype1ToStereotype2"] {
        get-edit-part -className DNodeListNameEditPart | get-property "getFigure().getText()" | equals "«Stereotype» \n"
            + "Stereotype1ToStereotype2" | verify-true
        with [get-edit-part -className DNodeListViewNodeListCompartment2EditPart] {
            get-edit-part -name "sourceRole_endType : Stereotype1 [1]" | get-property "getFigure().getText()" 
                | equals "sourceRole_endType : Stereotype1 [1]" | verify-true
            get-edit-part -name "targetRole_endType : Stereotype2 [1]" | get-property "getFigure().getText()" 
                | equals "targetRole_endType : Stereotype2 [1]" | verify-true
        }
    }
}

// Check relationShip
with [get-editor "Test Profile Diagram" | get-diagram -index 1 | get-edit-part -name "Test Profile Diagram"] {
     with [get-edit-part -name "«Stereotype» \n"
        + "Stereotype2" | get-target-connection 0 | get-target-connection 0] {
        get-property "element.ownedStyle.customFeatures" | equals "[]" | verify-true
        get-property "element.ownedStyle.lineStyle" | equals solid | verify-true
        get-property "element.ownedStyle.sourceArrow" | equals NoDecoration | verify-true
        get-property "element.ownedStyle.targetArrow" | equals NoDecoration | verify-true
        get-property "element.ownedStyle.foldingStyle" | equals NONE | verify-true
        get-property "element.ownedStyle.size" | equals 2 | verify-true
        get-property "element.ownedStyle.routingStyle" | equals straight | verify-true
        //get-property "element.ownedStyle.beginLabelStyle" | equals null | verify-true
        //get-property "element.ownedStyle.endLabelStyle" | equals null | verify-true
        get-property "element.ownedStyle.centered" | equals None | verify-true
        get-property "element.sourceNode.name" | equals "«Stereotype» \n"
            + "Stereotype1ToStereotype2" | verify-true
        get-property "element.targetNode.name" | equals "" | verify-true
        get-property "getFigure().isVisible()" | equals true | verify-true
    }
}
    
// Check metaclass appears in diagram
with [get-editor "Test Profile Diagram" | get-diagram -index 1 | get-edit-part -name "Test Profile Diagram"] {
    with [get-edit-part -name "«Metaclass»\n"
        + "Association"] {
        get-edit-part -className DNodeContainerViewNodeContainerCompartmentEditPart | get-figure "1/0" 
            | get-property "isVisible()" | equals true | verify-true
        with [get-target-connection 0] {
            get-property "getFigure().isVisible()" | equals true | verify-true
            get-property "getFigure().getSmoothness()" | equals 0 | verify-true
        }
    }
}