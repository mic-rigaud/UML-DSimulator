// Load AllMappings Profile Diagram
get-view "Model Explorer" | get-tree | select "AllMappings/model.uml/<Model> Test/<Profile> Test/Test Profile Diagram" 
    | double-click

// Check Diagram number of elements.
with [get-editor "Test Profile Diagram" | get-diagram -index 1 | get-edit-part -name "Test Profile Diagram"] {
    get-property "element.target.ownedMember.size" | equals 8 | verify-true
    get-property "element.target.ownedMember.Package[0].name" | equals Package1 | verify-true
    get-property "element.target.ownedMember.Profile[1].name" | equals Profile1 | verify-true
    get-property "element.target.ownedMember.Enumeration[2].name" | equals Enumeration1 | verify-true
    get-property "element.target.ownedMember.Stereotype[3].name" | equals Stereotype1 | verify-true
    get-property "element.target.ownedMember.PrimitiveType[4].name" | equals PrimitiveType1 | verify-true
    get-property "element.target.ownedMember.DataType[5].name" | equals DataType1 | verify-true
    get-property "element.target.ownedMember.Stereotype[6].name" | equals Stereotype3 | verify-true
    get-property "element.target.ownedMember.Profile[7].name" | equals Profile2 | verify-true
}
// Check Import 
with [get-editor "Test Profile Diagram" | get-diagram -index 1 | get-edit-part -name "Test Profile Diagram" 
    | get-edit-part -name "«Profile» \n"
    + "Profile1" | get-edit-part -className DNodeContainerViewNodeContainerCompartmentEditPart | get-edit-part 
    -name "«Metaclass»\n"
    + "Class"] {
    get-edit-part -className DNodeContainerViewNodeContainerCompartment2EditPart | get-figure 1 
        | get-property "isVisible()" | equals true | verify-true
}

// Check Extension
with [get-editor "Test Profile Diagram" | get-diagram -index 1 | get-edit-part -name "Test Profile Diagram" 
    | get-edit-part -name "«Profile» \n"
    + "Profile1" | get-edit-part -className DNodeContainerViewNodeContainerCompartmentEditPart | get-edit-part 
    -name "«Metaclass»\n"
    + "Class"] {
    get-target-connection 0 | get-property "getFigure().isVisible()" | equals true | verify-true
}
// Generalization
with [get-editor "Test Profile Diagram" | get-diagram -index 1 | get-edit-part -name "Test Profile Diagram"] {
    get-edit-part -name "«Profile» \n"
        + "Profile1" | get-edit-part -className DNodeContainerViewNodeContainerCompartmentEditPart | get-edit-part 
        -name "«Stereotype» \n"
        + "Stereotype1" | get-target-connection 0 | get-property "getFigure().isVisible()" | equals true | verify-true
}
// Association
with [get-editor "Test Profile Diagram" | get-diagram -index 1 | get-edit-part -name "Test Profile Diagram"] {
    with [get-edit-part -name "«Stereotype» \n"
        + "Stereotype1" | get-target-connection 0 | get-edit-part -className ""] {
        get-property "getEditText()" | equals "A_Stereotype2s_Stereotype1s" | verify-true
        get-property "getFigure().getText()" | equals "A_Stereotype2s_Stereotype1s" | verify-true
        get-property "getFigure().isVisible()" | equals true | verify-true
    }
}
// Abstract Association Stereotype
// Absctract Association Stereotype Link

// Stereotype
with [get-editor "Test Profile Diagram" | get-diagram -index 1 | get-edit-part -name "Test Profile Diagram"] {
    with [get-edit-part -name "«Profile» \n"
        + "Profile1" | get-edit-part -className DNodeContainerViewNodeContainerCompartmentEditPart | get-edit-part 
        -name "«Stereotype» \n"
        + "Stereotype1" | get-edit-part -className DNodeListName2EditPart] {
        get-property "getFigure().getText()" | equals "«Stereotype» \n"
            + "Stereotype1" | verify-true
        get-property "getFigure().isVisible()" | equals true | verify-true
    }
}

// Enumeration
with [get-editor "Test Profile Diagram" | get-diagram -index 1 | get-edit-part -name "Test Profile Diagram"] {
    with [get-edit-part -name Enumeration1 | get-edit-part -className DNodeListNameEditPart] {
        get-property "getFigure().getText()" | equals Enumeration1 | verify-true
        get-property "getFigure().isVisible()" | equals true | verify-true
    }
}

// Datatype
with [get-editor "Test Profile Diagram" | get-diagram -index 1 | get-edit-part -name "Test Profile Diagram"] {
    with [get-edit-part -name DataType1 | get-edit-part -className DNodeListNameEditPart] {
        get-property "getFigure().getText()" | equals DataType1 | verify-true
        get-property "getFigure().isVisible()" | equals true | verify-true
    }
}

// PrimitiveType
with [get-editor "Test Profile Diagram" | get-diagram -index 1 | get-edit-part -name "Test Profile Diagram"] {
    with [get-edit-part -name PrimitiveType1 | get-edit-part -className DNodeListNameEditPart] {
        get-property "getFigure().getText()" | equals PrimitiveType1 | verify-true
        get-property "getFigure().isVisible()" | equals true | verify-true
    }
}

// Package
with [get-editor "Test Profile Diagram" | get-diagram -index 1 | get-edit-part -name "Test Profile Diagram"] {
    get-edit-part -name Package1 | get-edit-part -className DNodeContainerViewNodeContainerCompartmentEditPart 
        | get-property "getFigure().isVisible()" | equals true | verify-true
}

// Profile
with [get-editor "Test Profile Diagram" | get-diagram -index 1 | get-edit-part -name "Test Profile Diagram"] {
    get-edit-part -name "«Profile» \n"
        + "Profile1" | get-edit-part -className DNodeContainerViewNodeContainerCompartmentEditPart | get-figure "1/0" 
        | get-property "isVisible()" | equals true | verify-true
}

// Check Extra Extension
with [get-editor "Test Profile Diagram" | get-diagram -index 1 | get-edit-part -name "Test Profile Diagram" 
    | get-edit-part -name "«Profile» \n"
    + "Profile2" | get-edit-part -className DNodeContainerViewNodeContainerCompartmentEditPart | get-edit-part 
    -name "«Stereotype» \n"
    + "Stereotype3" | get-target-connection 0] {
    get-edit-part -className "" -index 1 | get-property "getFigure().getText()" | equals "client[1..*]" | verify-true
    get-edit-part -className "" -index 2 | get-property "getFigure().getText()" | equals "supplier[1..*]" | verify-true
    get-property "getFigure().isVisible()" | equals true | verify-true
    get-target-connection 0 | get-property "getFigure().isVisible()" | equals true | verify-true
}