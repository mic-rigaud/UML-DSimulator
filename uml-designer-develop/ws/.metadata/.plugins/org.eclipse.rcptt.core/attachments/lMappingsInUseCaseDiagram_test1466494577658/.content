// Check Number of elements in diagram 
get-editor "Test Use Case Diagram" | get-diagram -index 1 | get-edit-part -name "Test Use Case Diagram" 
    | get-property childrenCount | equals 11 | verify-true
    
// Check Actor1 is present and visible
with [get-editor "Test Use Case Diagram" | get-diagram -index 1 | get-edit-part -name "Test Use Case Diagram"] {
    get-edit-part -name Actor1 | get-edit-part -name Actor1 | get-property "getFigure().getText()" | equals Actor1 
        | verify-true
}

// Check UseCase1 is present and visible
with [get-editor "Test Use Case Diagram" | get-diagram -index 1 | get-edit-part -name "Test Use Case Diagram" 
    | get-edit-part -name UseCaseTest1 | get-edit-part -className WorkspaceImageEditPart] {
    get-property "getFigure().isVisible()" | equals true | verify-true
}

// Check Association is present and visible
with [get-editor "Test Use Case Diagram" | get-diagram -index 1 | get-edit-part -name "Test Use Case Diagram"
    | get-edit-part -name Actor1 | get-target-connection 0] {
    get-property visible | equals true | verify-true
}

// Check Extend is present and visible
with [get-editor "Test Use Case Diagram" | get-diagram -index 1 | get-edit-part -name "Test Use Case Diagram"
    | get-edit-part -name UseCaseTest1 | get-target-connection 0] {
    get-edit-part -className "" | get-property "getFigure().getText()" | equals "« extend »" | verify-true
    get-property "element.ownedStyle.customFeatures" | equals "[]" | verify-true
    get-property "element.ownedStyle.lineStyle" | equals dash | verify-true
    get-property "element.ownedStyle.sourceArrow" | equals NoDecoration | verify-true
    get-property "element.ownedStyle.targetArrow" | equals InputArrow | verify-true
    get-property "element.ownedStyle.foldingStyle" | equals NONE | verify-true
    get-property "element.ownedStyle.size" | equals 1 | verify-true
    get-property "element.ownedStyle.routingStyle" | equals straight | verify-true
    //get-property "element.ownedStyle.beginLabelStyle" | equals null | verify-true
    //get-property "element.ownedStyle.endLabelStyle" | equals null | verify-true
    get-property "element.ownedStyle.centered" | equals None | verify-true
}

// Check Include is present and visible
with [get-editor "Test Use Case Diagram" | get-diagram -index 1 | get-edit-part -name "Test Use Case Diagram"
    | get-edit-part -name UseCaseTest2 | get-target-connection 0] {
    get-edit-part -className "" | get-property "getFigure().getText()" | equals "« include »" | verify-true
    get-property "element.ownedStyle.customFeatures" | equals "[]" | verify-true
    get-property "element.ownedStyle.lineStyle" | equals dash | verify-true
    get-property "element.ownedStyle.sourceArrow" | equals NoDecoration | verify-true
    get-property "element.ownedStyle.targetArrow" | equals InputArrow | verify-true
    get-property "element.ownedStyle.foldingStyle" | equals NONE | verify-true
    get-property "element.ownedStyle.size" | equals 1 | verify-true
    get-property "element.ownedStyle.routingStyle" | equals straight | verify-true
    //get-property "element.ownedStyle.beginLabelStyle" | equals null | verify-true
    //get-property "element.ownedStyle.endLabelStyle" | equals null | verify-true
    get-property "element.ownedStyle.centered" | equals None | verify-true
}

//Check Generalization is present and visible
with [get-editor "Test Use Case Diagram" | get-diagram -index 1 | get-edit-part -name "Test Use Case Diagram"] {
    with [get-edit-part -name Actor1 | get-target-connection 1] {
        get-property "element.ownedStyle.customFeatures" | equals "[]" | verify-true
        get-property "element.ownedStyle.lineStyle" | equals solid | verify-true
        get-property "element.ownedStyle.sourceArrow" | equals NoDecoration | verify-true
        get-property "element.ownedStyle.targetArrow" | equals InputClosedArrow | verify-true
        get-property "element.ownedStyle.foldingStyle" | equals NONE | verify-true
        get-property "element.ownedStyle.size" | equals 1 | verify-true
        get-property "element.ownedStyle.routingStyle" | equals straight | verify-true
        //get-property "element.ownedStyle.beginLabelStyle" | equals null | verify-true
        //get-property "element.ownedStyle.endLabelStyle" | equals null | verify-true
        get-property "element.ownedStyle.centered" | equals None | verify-true
        get-property "getFigure().isVisible()" | equals true | verify-true
    }
}

// Check Subject Collaboration is present and visible
with [get-editor "Test Use Case Diagram" | get-diagram -index 1 | get-edit-part -name "Test Use Case Diagram"
    | get-edit-part -name "Test Subject" -index 4 | get-edit-part 
    -className DNodeContainerViewNodeContainerCompartmentEditPart] {
    get-property "getFigure().isVisible()" | equals true | verify-true
}

// Check Subject DataType is present and visible
with [get-editor "Test Use Case Diagram" | get-diagram -index 1 | get-edit-part -name "Test Use Case Diagram"
    | get-edit-part -name "Test Subject" -index 2 | get-edit-part 
    -className DNodeContainerViewNodeContainerCompartmentEditPart] {
    get-figure "1/0" | get-property "isVisible()" | equals true | verify-true
}

// Check Subject Component is present and visible
with [get-editor "Test Use Case Diagram" | get-diagram -index 1 | get-edit-part -name "Test Use Case Diagram"
    | get-edit-part -name "Test Subject" | get-edit-part 
    -className DNodeContainerViewNodeContainerCompartmentEditPart] {
    get-property "getFigure().isVisible()" | equals true | verify-true
}

// Check Subject Class is present and visible
with [get-editor "Test Use Case Diagram" | get-diagram -index 1 | get-edit-part -name "Test Use Case Diagram"
    | get-edit-part -name "Test Subject" -index 5 | get-edit-part 
    -className DNodeContainerViewNodeContainerCompartmentEditPart | get-figure "1/0"] {
    get-property "isVisible()" | equals true | verify-true
}

// Check Subject Interface is present and visible
 with [get-editor "Test Use Case Diagram" | get-diagram -index 1 | get-edit-part -name "Test Use Case Diagram"
    | get-edit-part -name "Test Subject" -index 3 | get-edit-part 
    -className DNodeContainerViewNodeContainerCompartmentEditPart] {
    get-property "getFigure().isVisible()" | equals true | verify-true
}

// Check Subject Artifact is present and visible
with [get-editor "Test Use Case Diagram" | get-diagram -index 1 | get-edit-part -name "Test Use Case Diagram"
    | get-edit-part -name "Test Subject" -index 1 | get-edit-part 
    -className DNodeContainerViewNodeContainerCompartmentEditPart] {
    get-property "getFigure().isVisible()" | equals true | verify-true
}
