//Create new transition
with [get-editor "NewModel State Machine Diagram"] {
    with [get-palette | get-palette-entry Transition] {
        mouse-move 64 10 button1 -height 23 -width 134
        mouse-press 64 10 button1 -height 23 -width 134
        mouse-release 64 10 button1 524288 -height 23 -width 134
    }
} 
with [get-editor "NewModel State Machine Diagram"] {
    with [get-diagram -index 1 | get-edit-part -name "NewModel State Machine Diagram" | get-edit-part -name NewModel 
        | get-edit-part -className DNodeContainerViewNodeContainerCompartmentEditPart] {
        // Select Initial state node as source
        with [get-edit-part -name Region1 | get-edit-part 
            -className DNodeContainerViewNodeContainerCompartment2EditPart] {
            with [get-edit-part -name Initial1 | get-edit-part -className WorkspaceImageEditPart] {
                mouse-move 17 23 button1 -height 30 -width 30
                mouse-press 17 23 button1 -height 30 -width 30
                mouse-release 17 23 button1 524288 -height 30 -width 30
            }
        }
        // Select State1 node as target
        with [get-edit-part -name Region1 | get-edit-part 
            -className DNodeContainerViewNodeContainerCompartment2EditPart] {
            with [get-edit-part -name State1] {
                mouse-move 25 22 button1 -height 40 -width 40
                mouse-press 25 22 button1 -height 40 -width 40
                mouse-release 25 22 button1 524288 -height 40 -width 40
            }
        }
    }
}
// Check Style
with [get-editor "NewModel State Machine Diagram" | get-diagram -index 1 | get-edit-part 
    -name "NewModel State Machine Diagram" | get-edit-part -name NewModel | get-edit-part 
    -className DNodeContainerViewNodeContainerCompartmentEditPart | get-edit-part -name Region1 | get-edit-part 
    -className DNodeContainerViewNodeContainerCompartment2EditPart | get-edit-part -name State1 
    | get-target-connection 0] {
    get-property "element.ownedStyle.customFeatures" | equals "[]" | verify-true
    get-property "element.ownedStyle.lineStyle" | equals solid | verify-true
    get-property "element.ownedStyle.sourceArrow" | equals NoDecoration | verify-true
    get-property "element.ownedStyle.targetArrow" | equals InputArrow | verify-true
    get-property "element.ownedStyle.foldingStyle" | equals NONE | verify-true
    get-property "element.ownedStyle.size" | equals 1 | verify-true
    get-property "element.ownedStyle.routingStyle" | equals manhattan | verify-true
    //get-property "element.ownedStyle.beginLabelStyle" | equals null | verify-true
    //get-property "element.ownedStyle.endLabelStyle" | equals null | verify-true
    get-property "element.ownedStyle.centered" | equals None | verify-true

}
// CheckDiagram
with [get-editor "NewModel State Machine Diagram" | get-diagram -index 1 | get-edit-part 
    -name "NewModel State Machine Diagram" | get-edit-part -name NewModel | get-edit-part 
    -className DNodeContainerViewNodeContainerCompartmentEditPart | get-edit-part -name Region1 | get-edit-part 
    -className DNodeContainerViewNodeContainerCompartment2EditPart | get-edit-part -name State1 
    | get-target-connection 0] {
    get-property "getFigure().isVisible()" | equals true | verify-true
}
// Check Model
with [get-editor "NewModel State Machine Diagram" | get-diagram -index 1 | get-edit-part 
    -name "NewModel State Machine Diagram" | get-edit-part -name NewModel | get-edit-part 
    -className DNodeContainerViewNodeContainerCompartmentEditPart | get-edit-part -name Region1 | get-edit-part 
    -className DNodeContainerViewNodeContainerCompartment2EditPart | get-edit-part -name State1 
    | get-target-connection 0] {
    get-property "element.target.source.name" | equals Initial1 | verify-true
    get-property "element.target.target.name" | equals State1 | verify-true
}