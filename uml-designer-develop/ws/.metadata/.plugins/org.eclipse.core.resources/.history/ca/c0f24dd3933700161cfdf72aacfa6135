package org.ensta.uml.sim.handlers;

import java.util.Collection;

import org.eclipse.core.commands.AbstractHandler;
import org.eclipse.core.commands.ExecutionEvent;
import org.eclipse.core.commands.ExecutionException;
import org.eclipse.jface.dialogs.MessageDialog;
import org.eclipse.sirius.business.api.session.Session;
import org.eclipse.sirius.business.api.session.SessionManager;
import org.eclipse.sirius.viewpoint.DView;
import org.eclipse.ui.IWorkbenchWindow;
import org.eclipse.ui.handlers.HandlerUtil;

/**
 * Our sample handler extends AbstractHandler, an IHandler base class.
 * 
 * @see org.eclipse.core.commands.IHandler
 * @see org.eclipse.core.commands.AbstractHandler
 */
public class SampleHandler extends AbstractHandler {

    PluginUI plug;

    /**
     * The constructor.
     */
    public SampleHandler() {
        this.plug = new PluginUI();
    }

    /**
     * the command has been executed, so extract extract the needed information
     * from the application context.
     */
    @Override
    public Object execute(ExecutionEvent event) throws ExecutionException {
        IWorkbenchWindow window = HandlerUtil.getActiveWorkbenchWindowChecked(event);

        Session mysession = (Session) SessionManager.INSTANCE.getSessions().toArray()[0];
        Collection<DView> view = mysession.getSelectedViews();
        String phrase = "";
        for (int i = 0; i < view.size(); i++) {
            phrase = phrase + view.toArray()[i].toString();
        }

        MessageDialog.openInformation(window.getShell(), "Sim", phrase);
        return null;
    }
}
